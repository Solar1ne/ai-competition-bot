from aiogram import types, Router, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
import os
from handlers.common import get_inline_menu, get_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    NAME = State()
    EMAIL = State()

def is_user_registered(user_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–º—è –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    if not os.path.exists("data/users.csv"):
        return False, ""
        
    try:
        with open("data/users.csv", "r", encoding='utf-8') as file:
            for line in file:
                if line.strip():
                    id_, name, _ = line.strip().split(",")
                    if str(user_id) == id_:
                        return True, name
    except Exception as e:
        print(f"Error checking registration: {e}")
    return False, ""

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    is_registered, name = is_user_registered(message.from_user.id)
    greeting = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\n" if is_registered else "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π!\n\n"
    
    text_parts = [
        greeting,
        "üîπ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏",
        "üîπ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
        "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n",
    ]
    
    if is_registered:
        text_parts.append("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:")
    else:
        text_parts.extend([
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'",
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /register"
        ])
    
    await message.answer("\n".join(text_parts), reply_markup=get_keyboard())

@router.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    is_registered, name = is_user_registered(message.from_user.id)
    
    if is_registered:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {name}! ‚úÖ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return
        
    await state.clear()  # Clear any existing state
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationState.NAME)

@router.message(StateFilter(RegistrationState.NAME), ~F.text.startswith("/"))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(RegistrationState.EMAIL)

@router.message(StateFilter(RegistrationState.EMAIL), ~F.text.startswith("/"))
async def process_email(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data["email"] = message.text

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("data", exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_registered, _ = is_user_registered(message.from_user.id)
    if is_registered:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await state.clear()
        return

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    users = []
    if os.path.exists("data/users.csv"):
        with open("data/users.csv", "r", encoding='utf-8') as file:
            for line in file:
                if line.strip():
                    id_, name, email = line.strip().split(",")
                    if id_ != str(message.from_user.id):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        users.append((id_, name, email))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    users.append((str(message.from_user.id), data['name'], data['email']))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    with open("data/users.csv", "w", encoding='utf-8') as file:
        for user in users:
            file.write(f"{user[0]},{user[1]},{user[2]}\n")

    success_message = [
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {data['name']}! ‚úÖ\n",
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:",
        "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ /submit",
        "üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ /leaderboard\n",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
    ]
    
    await message.answer("\n".join(success_message))
    await state.clear()

def register_handlers_start(dp: Dispatcher):
    dp.include_router(router)