from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import subprocess
import pandas as pd
import os
import importlib.util
import sys
from tasks.tasks import TASKS
from contextlib import redirect_stdout
import io
import json
from GigaChatHelper import get_hint

router = Router()

SOLVED_TASKS_FILE = "data/solved_tasks.json"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(SOLVED_TASKS_FILE):
    os.makedirs(os.path.dirname(SOLVED_TASKS_FILE), exist_ok=True)
    with open(SOLVED_TASKS_FILE, "w") as f:
        json.dump({}, f)

def get_solved_tasks(user_id: int) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with open(SOLVED_TASKS_FILE, "r") as f:
            solved_tasks = json.load(f)
            return solved_tasks.get(str(user_id), [])
    except Exception:
        return []

def mark_task_solved(user_id: int, task_id: str):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é"""
    try:
        with open(SOLVED_TASKS_FILE, "r") as f:
            solved_tasks = json.load(f)
    except Exception:
        solved_tasks = {}
    
    if str(user_id) not in solved_tasks:
        solved_tasks[str(user_id)] = []
    
    if task_id not in solved_tasks[str(user_id)]:
        solved_tasks[str(user_id)].append(task_id)
        
        with open(SOLVED_TASKS_FILE, "w") as f:
            json.dump(solved_tasks, f)

def get_task_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏"""
    keyboard = []
    solved = []  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    
    for task_id, task in TASKS.items():
        status = "‚úÖ" if task_id in solved else "‚≠ïÔ∏è"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {task.title}",
                callback_data=f"task_{task_id}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("tasks"))
async def cmd_tasks(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á"""
    await message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_task_keyboard()
    )

@router.callback_query(F.data.startswith("task_"))
async def show_task_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "task_"
    task = TASKS[task_id]
    solved = get_solved_tasks(callback.from_user.id)
    
    text = [
        f"üìã –ó–∞–¥–∞—á–∞: {task.title}",
        f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {task.points} –æ—á–∫–æ–≤",
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –†–µ—à–µ–Ω–∞' if task_id in solved else '‚≠ïÔ∏è –ù–µ —Ä–µ—à–µ–Ω–∞'}\n",
        task.description,
        "\nüìù –ü—Ä–∏–º–µ—Ä—ã:",
    ]
    
    for i, example in enumerate(task.examples, 1):
        text.append(f"–ü—Ä–∏–º–µ—Ä {i}:")
        text.append(f"–í—Ö–æ–¥: {example['input']}")
        text.append(f"–í—ã—Ö–æ–¥: {example['output']}\n")
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"submit_{task_id}"),
                InlineKeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{task_id}")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="back_to_tasks")]
        ]
    )
    
    await callback.message.edit_text("\n".join(text), reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_tasks")
async def back_to_tasks_callback(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á"""
    await cmd_tasks(callback.message)
    await callback.answer()

@router.callback_query(F.data.startswith("hint_"))
async def hint_task_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "hint_"
    task = TASKS[task_id]
    
    try:
        hint = get_hint(f"–ü–æ–¥—Å–∫–∞–∂–∏ –∫–∞–∫ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É: {task.description}")
        await callback.message.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∑–∞–¥–∞—á–µ '{task.title}':\n\n{hint}")
    except Exception as e:
        await callback.message.answer(
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–∞—Ç—å –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hint"
        )
    await callback.answer()

@router.callback_query(F.data.startswith("submit_"))
async def submit_task_callback(callback: types.CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
    task_id = callback.data[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "submit_"
    task = TASKS[task_id]
    
    await callback.message.answer(
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ '{task.title}'.\n"
        f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é {task_id}() —Å –Ω—É–∂–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π."
    )
    await callback.answer()

@router.message(Command("submit"))
async def cmd_submit(message: types.Message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .py —Ñ–∞–π–ª —Å –≤–∞—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º.\n"
        "‚ö†Ô∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n"
        "- sum_array(arr)\n"
        "- find_max(arr)\n"
        "- is_prime(n)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."
    )

def check_solution(file_path: str) -> tuple[bool, str, str, int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, task_id, –æ—á–∫–∏)"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Å —Ä–µ—à–µ–Ω–∏–µ–º
        spec = importlib.util.spec_from_file_location("solution", file_path)
        if not spec or not spec.loader:
            return False, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏—è", "", 0
        
        solution = importlib.util.module_from_spec(spec)
        sys.modules["solution"] = solution
        spec.loader.exec_module(solution)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —Ä–µ—à–∞–µ—Ç—Å—è
        task_id = ""
        solution_func = None
        
        if hasattr(solution, "sum_array"):
            task_id = "sum_array"
            solution_func = solution.sum_array
        elif hasattr(solution, "find_max"):
            task_id = "find_max"
            solution_func = solution.find_max
        elif hasattr(solution, "is_prime"):
            task_id = "is_prime"
            solution_func = solution.is_prime
        else:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", "", 0
        
        task = TASKS[task_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–∞—Ö
        for i, test in enumerate(task.test_cases, 1):
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
            f = io.StringIO()
            with redirect_stdout(f):
                result = solution_func(test["input"])
            
            if result != test["output"]:
                return False, f"–û—à–∏–±–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–µ {i}:\n–í—Ö–æ–¥: {test['input']}\n–û–∂–∏–¥–∞–ª–æ—Å—å: {test['output']}\n–ü–æ–ª—É—á–µ–Ω–æ: {result}", task_id, 0
        
        return True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!", task_id, task.points
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}", "", 0

@router.message(F.document)
async def handle_file(message: types.Message):
    if not message.document.file_name.endswith(".py"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py")
        return

    file_path = f"submissions/{message.document.file_name}"
    os.makedirs("submissions", exist_ok=True)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        await message.bot.download_file(file.file_path, file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
        success, result_message, task_id, points = check_solution(file_path)
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ—à–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞–¥–∞—á–∞
            solved_tasks = get_solved_tasks(message.from_user.id)
            if task_id in solved_tasks:
                await message.answer(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ '{TASKS[task_id].title}' —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ!\n"
                    "–ù–æ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ –Ω–µ—ë –æ—á–∫–∏ —Ä–∞–Ω–µ–µ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = ""
            with open("data/users.csv", "r", encoding='utf-8') as f:
                for line in f:
                    user_id, name, _ = line.strip().split(",")
                    if user_id == str(message.from_user.id):
                        user_name = name
                        break

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ —á–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                if not os.path.exists("data/leaderboard.csv"):
                    os.makedirs(os.path.dirname("data/leaderboard.csv"), exist_ok=True)
                    with open("data/leaderboard.csv", "w", encoding='utf-8') as f:
                        f.write("name,score\n")
                    leaderboard = pd.DataFrame(columns=["name", "score"])
                else:
                    leaderboard = pd.read_csv("data/leaderboard.csv")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏
                if user_name in leaderboard["name"].values:
                    mask = leaderboard["name"] == user_name
                    leaderboard.loc[mask, "score"] = leaderboard.loc[mask, "score"] + points
                else:
                    new_row = pd.DataFrame({"name": [user_name], "score": [points]})
                    leaderboard = pd.concat([leaderboard, new_row], ignore_index=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                leaderboard.to_csv("data/leaderboard.csv", index=False, encoding='utf-8')
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é
                mark_task_solved(message.from_user.id, task_id)
                
            except Exception as e:
                print(f"Error updating leaderboard: {e}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤, –Ω–æ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ!")

            await message.answer(
                f"‚úÖ –ó–∞–¥–∞—á–∞ '{TASKS[task_id].title}' —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ!\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {points} –æ—á–∫–æ–≤! üèÜ\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏"
            )
        else:
            await message.answer(f"‚ùå {result_message}")
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—à–µ–Ω–∏—è: {str(e)}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

@router.message(Command("hint"))
async def cmd_hint(message: types.Message):
    user_message = message.text.replace("/hint", "").strip()
    if not user_message:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /hint.\n"
            "–ü—Ä–∏–º–µ—Ä: /hint –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º."
        )
        return

    try:
        hint = get_hint(user_message) 
        await message.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}")
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def register_handlers_competition(dp):
    dp.include_router(router)